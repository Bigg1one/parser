import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.filters import Command
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from telethon.tl.functions.contacts import ImportContactsRequest
from aiogram.types import FSInputFile
from telethon import events
from telethon.tl.types import PeerChannel
from telethon.tl.types import User
from telethon.tl.functions.channels import GetParticipantRequest
from telethon.tl.types import ChannelParticipantsAdmins, Channel, Chat, ChannelParticipantAdmin, ChannelParticipantCreator
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.errors import UserAlreadyParticipantError, InviteHashInvalidError
from telethon import events
from dotenv import load_dotenv
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
SESSIONS_DIR = "sessions"
os.makedirs(SESSIONS_DIR, exist_ok=True)


async def get_clients():
    clients = []
    for file in os.listdir(SESSIONS_DIR):
        if file.endswith(".session"):
            session_path = os.path.join(SESSIONS_DIR, file)
            client = TelegramClient(session_path.replace(".session", ""), API_ID, API_HASH,system_version="4.16.30-vxCUSTOM")
            try:
                await client.connect()
                if await client.is_user_authorized():
                    clients.append(client)
                    logger.info(f"–°–µ—Å—Å–∏—è {file} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                else:
                    logger.warning(f"–°–µ—Å—Å–∏—è {file} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                    await client.disconnect()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {file}: {e}")
    return clients


@dp.message(Command("addsession"))
async def add_session(msg: types.Message):
    await msg.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .session, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /addsession")


@dp.message(lambda m: m.document and m.document.file_name.endswith(".session"))
async def handle_session_upload(msg: types.Message, bot: Bot):
    if not is_admin(msg.from_user.id):

        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –æ—Ç {msg.from_user.id}")
        return
    file = await bot.get_file(msg.document.file_id)
    session_path = os.path.join(SESSIONS_DIR, msg.document.file_name)
    await bot.download_file(file.file_path, session_path)
    await msg.reply("–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {msg.document.file_name}")


@dp.message(Command("parse"))
async def parse_chat(msg: types.Message):
    if not is_admin(msg.from_user.id):

        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /parse –æ—Ç {msg.from_user.id}")
        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        await msg.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username —á–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /parse @chatname –∏–ª–∏ /parse -1001234567890")
        return

    target = parts[1]
    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return

    client = clients[0]
    logger.info(f"–ù–∞—á–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {target} —Å–µ—Å—Å–∏–µ–π {client.session.filename}")
    await msg.reply(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {target}...", parse_mode="Markdown")

    try:
        if target.startswith("@"):
            entity = await client.get_entity(target)
        else:
            entity = await client.get_entity(PeerChannel(int(target.replace("-100", ""))))
        full = await client.get_entity(entity)
        title = getattr(full, "title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        lines = []
        count = 0
        total = 0
        skipped = 0

        async for user in client.iter_participants(entity):
            total += 1
            if isinstance(user, User) and not getattr(user, "bot", False):
                phone = user.phone if getattr(user, "phone", None) else None
                uname = user.username if user.username else None
                if phone and uname:
                    uid = str(user.id)
                    line = f"ID: {uid} | Username: @{uname} | –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                    lines.append(line)
                    count += 1
                else:
                    skipped += 1

        if count == 0:
            await msg.reply("‚ùå –í —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ username.")
            return


        file_path = "parsed_users_with_phone.txt"
        with open(file_path, "w", encoding="utf-8") as f:
            f.write("\n".join(lines))
        caption = (
            f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω\n"
            f"üìå –ß–∞—Ç: {title}\n"
            f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total}\n"
            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {count}\n"
            f"‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç username/—Ç–µ–ª–µ—Ñ–æ–Ω–∞): {skipped}"
        )

        await msg.reply_document(FSInputFile(file_path), caption=caption)
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. –§–∞–π–ª: {file_path}")

    except Exception as e:
        msg_text = str(e)
        if "ChatAdminRequiredError" in msg_text or "USER_PRIVACY_RESTRICTED" in msg_text:
            await msg.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º.", parse_mode="Markdown")
        else:
            await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {msg_text}", parse_mode="Markdown")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Ç–∞ {target}: {e}")
    finally:
        await client.disconnect()



@dp.message(Command("dialogs"))
async def get_dialogs(msg: types.Message):
    if not is_admin(msg.from_user.id):

        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /dialogs –æ—Ç {msg.from_user.id}")
        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return

    client = clients[0]
    await msg.reply("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤...")

    try:
        dialogs = await client.get_dialogs()
        result = "üìÅ <b>–í—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        count = 0

        for dialog in dialogs:
            entity = dialog.entity

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if isinstance(entity, (Channel, Chat)) and hasattr(entity, 'title'):
                line = f"‚Ä¢ <code>{entity.id}</code> ‚Äî {entity.title}"
                result += line + "\n"
                count += 1

        if count == 0:
            result = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤."
        else:
            result += f"\nüìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {count}"

        await msg.reply(result, parse_mode="HTML")
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {count} —á–∞—Ç–æ–≤")
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:\n{str(e)}", parse_mode="Markdown")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {e}")
    finally:
        await client.disconnect()

        
@dp.message(Command("delsession"))
async def delete_session(msg: types.Message):
    if not is_admin(msg.from_user.id):

        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = msg.text.strip().split()
    if len(parts) != 2:
        await msg.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä:\n/delsession +7923xxxxxxx.session", parse_mode="Markdown")
        return

    session_file = parts[1]
    session_path = os.path.join(SESSIONS_DIR, session_file)

    try:
        if os.path.exists(session_path):
            os.remove(session_path)

            # –£–¥–∞–ª–∏–º —Ç–∞–∫–∂–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–º –∂–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, .session-journal)
            for suffix in [".session-journal", ".session-shm", ".session-wal"]:
                extra_file = session_path + suffix
                if os.path.exists(extra_file):
                    os.remove(extra_file)

            await msg.reply(f"‚úÖ –°–µ—Å—Å–∏—è {session_file} —É–¥–∞–ª–µ–Ω–∞.", parse_mode="Markdown")
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_file}")
        else:
            await msg.reply(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{str(e)}", parse_mode="Markdown")

@dp.message(Command("help"))
async def send_help(msg: types.Message):
    if not is_admin(msg.from_user.id):

        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = (
    "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:*\n\n"
    "/addsession ‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é .session-—Å–µ—Å—Å–∏—é\n"
    "/checksessions ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n"
    "/listsessions ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π\n"
    "/delsession <—Ñ–∞–π–ª> ‚Äî –£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é .session-—Å–µ—Å—Å–∏—é\n"
    "/dialogs ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ (–≥—Ä—É–ø–ø, –∫–∞–Ω–∞–ª–æ–≤)\n"
    "/parse <ID –∏–ª–∏ @username> ‚Äî –°–ø–∞—Ä—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞. "
    "–ü–µ—Ä–µ–¥ ID –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å -100. –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ID 41548548, —Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å -10041548548\n"
    "/privates ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
    "/admins ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
    "/addadmin <user_id> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    "/delveadmin <user_id> ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    "‚ùó –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ *–≤–ª–∞–¥–µ–ª—å—Ü—É* –∏–ª–∏ *–∞–¥–º–∏–Ω—É* –±–æ—Ç–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã).\n"
    "_–§–∞–π–ª—ã —Å–µ—Å—Å–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Telethon –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Ä—É—á–Ω—É—é._"
)


    await msg.reply(text, parse_mode="Markdown")

from aiogram.types import FSInputFile

from telethon.tl.types import User
from aiogram.types import FSInputFile

@dp.message(Command("checksessions"))
async def check_sessions(msg: types.Message):
    if not is_admin(msg.from_user.id):

        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /checksessions –æ—Ç {msg.from_user.id}")
        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return

    reply = f"üîê <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:</b> {len(clients)}\n\n"
    for client in clients:
        try:
            me = await client.get_me()
            info = f"‚Ä¢ <code>{me.id}</code> ‚Äî {me.first_name}"
            if me.username:
                info += f" (@{me.username})"
            reply += info + "\n"
            logger.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {me.id} ({me.username})")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        finally:
            await client.disconnect()

    await msg.reply(reply, parse_mode="HTML")


@dp.message(Command("privates"))
async def get_private_chats_file(msg: types.Message):
    if not is_admin(msg.from_user.id):

        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /privates –æ—Ç {msg.from_user.id}")
        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        return

    client = clients[0]
    await msg.reply("üîç –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö...")

    try:
        dialogs = await client.get_dialogs()
        rows = []
        count_users = 0

        for dialog in dialogs:
            entity = dialog.entity
            if isinstance(entity, User) and not getattr(entity, "bot", False):
                uid = str(entity.id)
                name = f"{entity.first_name or ''} {entity.last_name or ''}".strip()
                uname = f"@{entity.username}" if entity.username else "-"
                phone = entity.phone if getattr(entity, "phone", None) else "-"
                rows.append((uid, name, uname, phone))
                count_users += 1

        if count_users == 0:
            await msg.reply("‚ùå –õ–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
        col_widths = [12, 24, 20, 15]
        header = ["ID", "–ò–º—è", "Username", "–¢–µ–ª–µ—Ñ–æ–Ω"]
        separator = ["-" * w for w in col_widths]

        def format_row(row):
            return " | ".join(f"{str(cell)[:w]:<{w}}" for cell, w in zip(row, col_widths))

        lines = [format_row(header), format_row(separator)]
        lines += [format_row(row) for row in rows]

        file_path = "private_chats.txt"
        with open(file_path, "w", encoding="utf-8") as f:
            f.write("\n".join(lines))

        await msg.reply_document(FSInputFile(file_path), caption=f"üìÑ –ù–∞–π–¥–µ–Ω–æ {count_users} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤")
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count_users} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤:\n{str(e)}", parse_mode="Markdown")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
    finally:
        await client.disconnect()
        
@dp.message(Command("listsessions"))
async def list_sessions(msg: types.Message):
    if not is_admin(msg.from_user.id):

        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /listsessions –æ—Ç {msg.from_user.id}")
        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        files = [f for f in os.listdir(SESSIONS_DIR) if f.endswith(".session")]
        if not files:
            await msg.reply("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
            return

        text = "üìÇ *–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:*\n\n"
        for f in files:
            text += f"‚Ä¢ {f}\n"

        await msg.reply(text, parse_mode="Markdown")
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(files)} —Å–µ—Å—Å–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:\n{str(e)}", parse_mode="Markdown")

import json

ADMINS_FILE = "admins.json"

def load_admins():
    if not os.path.exists(ADMINS_FILE):
        return []
    with open(ADMINS_FILE, "r") as f:
        return json.load(f)

def save_admins(admin_ids):
    with open(ADMINS_FILE, "w") as f:
        json.dump(admin_ids, f)

admin_ids = load_admins()


def is_owner(user_id):
    return user_id == OWNER_ID

def is_admin(user_id):
    return user_id in admin_ids or is_owner(user_id)



@dp.message(Command("addadmin"))
async def add_admin(msg: types.Message):
    if not is_owner(msg.from_user.id):
        await msg.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].startswith("@"):
        await msg.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ username. –ü—Ä–∏–º–µ—Ä:\n/addadmin @username")
        return

    username = parts[1].lstrip("@")
    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID.")
        return

    client = clients[0]
    try:
        user = await client.get_entity(username)
        if not isinstance(user, User):
            raise ValueError("–≠—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        if user.id in admin_ids:
            await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∞–¥–º–∏–Ω.")
        else:
            admin_ids.append(user.id)
            save_admins(admin_ids)
            await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n{str(e)}")
    finally:
        await client.disconnect()


@dp.message(Command("deladmin"))
async def del_admin(msg: types.Message):
    if not is_owner(msg.from_user.id):
        await msg.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].startswith("@"):
        await msg.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ username. –ü—Ä–∏–º–µ—Ä:\n/deladmin @username")
        return

    username = parts[1].lstrip("@")
    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID.")
        return

    client = clients[0]
    try:
        user = await client.get_entity(username)
        if user.id not in admin_ids:
            await msg.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        else:
            admin_ids.remove(user.id)
            save_admins(admin_ids)
            await msg.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n{str(e)}")
    finally:
        await client.disconnect()

@dp.message(Command("admins"))
async def list_admins(msg: types.Message):
    if not is_owner(msg.from_user.id):
        await msg.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.")
        return

    if not admin_ids:
        await msg.reply("‚ùó –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return

    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return

    client = clients[0]
    result = []
    try:
        for admin_id in admin_ids:
            try:
                user = await client.get_entity(admin_id)
                username = f"@{user.username}" if user.username else "[no username]"
                result.append(f"‚Ä¢ {username} (ID: {admin_id})")
            except Exception as e:
                result.append(f"‚Ä¢ [–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö] (ID: {admin_id})")
        await msg.reply("üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω—ã:\n" + "\n".join(result))
    finally:
        await client.disconnect()
        

@dp.message(Command("join"))
async def join_chat(msg: types.Message):
    if not is_admin(msg.from_user.id):
        await msg.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = msg.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await msg.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/join https://t.me/–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞")
        return

    link = parts[1]
    clients = await get_clients()
    if not clients:
        await msg.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return

    client = clients[0]
    try:
        if "joinchat" in link or "+" in link:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            invite_hash = link.split("/")[-1].replace("+", "")
            await client(ImportChatInviteRequest(invite_hash))
            await msg.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç.")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ: {link}")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ (username)
            username = link.split("/")[-1].lstrip("@")
            await client(JoinChannelRequest(username))
            await msg.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É @{username}")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É: {username}")
    except UserAlreadyParticipantError:
        await msg.reply("‚ÑπÔ∏è –£–∂–µ —è–≤–ª—è–µ–º—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
    except InviteHashInvalidError:
        await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
    except Exception as e:
        await msg.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏:\n{str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç: {e}")
    finally:
        await client.disconnect()



async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())